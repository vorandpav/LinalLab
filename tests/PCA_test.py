import unittest
from PCA import PCA
from matrix import Matrix


class MyTestCase(unittest.TestCase):
    def setUp(self):
        self.matrices = [
            # 1
            "3 3\n"
            "100\n"
            "1 0 0\n"
            "0 0 0\n"
            "-7 8.54 0.45",
            # 2
            "4 3\n"
            "100\n"
            "1.43 -234.44 3.4\n"
            "4.43 0 0\n"
            "0 0 0\n"
            "10.21 11.33 12.12",
            # 3
            "5 5\n"
            "100\n"
            "1 0 0 0 0\n"
            "0 7 0 0 0\n"
            "0 0 -3.15 0 0\n"
            "0 0 0 9 0\n"
            "0 0 0 0 25",
            # 4
            "9 4\n"
            "100\n"
            "2 4 54.5 3.5\n"
            "23 43 45 56\n"
            "34 45 56 67\n"
            "213 94.5 35 34\n"
            "39 24 59 34\n"
            "23 45 56 67\n"
            "45 95 95 45 \n"
            "777 33 43.2 45.4\n"
            "2.1 2.3 6.5 4.5\n",
            # 5
            "9 8\n"
            "100\n"
            "2 4 54.5 3.5 2 4 54.6 3.5\n"
            "23 43 45 56 2 4 54.5 3.5\n"
            "34 45 56 67 2 4 54.9 3.5\n"
            "213 94.5 35 34 2 4 54.21 3.5\n"
            "39 24 59 34 2 4 54.64 3.5\n"
            "23 45 56 67 2 4 54.3 3.5\n"
            "45 95 95 45 2 4 54.5643 3.5\n"
            "777 33 43.2 45.4 2 4 54.556 3.5\n"
            "2.1 2.3 6.5 4.5 2 4 54.5 3.5564\n",
            # 6
            "10 10\n"
            "100\n"
            "9.74 -3.79 -3.28 8.7 -2.07 8.17 -0.05 9.66 4.98 -2.01\n"
            "5.66 2.35 -3.59 1.19 1.23 -2.53 3.62 -4.65 1.01 -3.71\n"
            "0.95 8.36 3.18 8.15 5.77 0.81 -2.48 -0.1 4.1 0.13\n"
            "7.1 -2.87 4.14 -2.7 -4.8 6.63 6.69 -4.84 9.09 -0.97\n"
            "7.48 0.56 9.28 8.54 7.07 -0.43 2.0 7.9 4.96 6.38\n"
            "-2.2 -0.34 -0.75 8.33 8.96 8.56 0.08 -0.01 -4.07 5.2\n"
            "6.33 -3.98 -0.02 -3.79 0.65 -1.22 4.95 1.27 3.43 2.95\n"
            "-0.41 -1.96 -3.88 3.91 9.78 5.42 6.18 9.84 8.09 3.95\n"
            "4.78 3.63 3.36 9.46 -1.5 -2.45 5.09 1.21 1.75 3.28\n"
            "4.62 5.93 0.23 7.35 -3.54 -0.61 -2.08 2.66 -3.0 5.73\n"
        ]

        self.centered_data = [
            # 1
            "3 3\n"
            "100\n"
            "3.0 -2.8466666667 -0.15\n"
            "2.0 -2.8466666667 -0.15\n"
            "-5.0 5.6933333333 0.3\n",
            # 2
            "4 3\n"
            "100\n"
            "-2.5875 -178.6625 -0.48\n"
            "0.4125 55.7775 -3.88\n"
            "-4.0175 55.7775 -3.88\n"
            "6.1925 67.1075 8.24\n",
            # 3
            "5 5\n"
            "100\n"
            "0.8 -1.4 0.63 -1.8 -5.0\n"
            "-0.2 5.6 0.63 -1.8 -5.0\n"
            "-0.2 -1.4 -2.52 -1.8 -5.0\n"
            "-0.2 -1.4 0.63 7.2 -5.0\n"
            "-0.2 -1.4 0.63 -1.8 20.0\n",
            # 4
            "9 4\n"
            "100\n"
            "-126.6777777778 -38.8666666667 4.4777777778 -36.1\n"
            "-105.6777777778 0.1333333333 -5.0222222222 16.4\n"
            "-94.6777777778 2.1333333333 5.9777777778 27.4\n"
            "84.3222222222 51.6333333333 -15.0222222222 -5.6\n"
            "-89.6777777778 -18.8666666667 8.9777777778 -5.6\n"
            "-105.6777777778 2.1333333333 5.9777777778 27.4\n"
            "-83.6777777778 52.1333333333 44.9777777778 5.4\n"
            "648.3222222222 -9.8666666667 -6.8222222222 5.8\n"
            "-126.5777777778 -40.5666666667 -43.5222222222 -35.1\n"
        ]

        self.covariance_data = [
            # 1
            "3 3\n"
            "100\n"
            "19.0 -21.35 -1.125\n"
            "-21.35 24.3105333333 1.281\n"
            "-1.125 1.281 0.0675\n",
            # 2
            "3 3\n"
            "100\n"
            "20.4508916667 225.5915083333 22.0852\n"
            "225.5915083333 14215.3214916667 68.6301333333\n"
            "22.0852 68.6301333333 32.7456\n",
            # 3
            "5 5\n"
            "100\n"
            "0.2 -0.35 0.1575 -0.45 -1.25\n"
            "-0.35 9.8 1.1025 -3.15 -8.75\n"
            "0.1575 1.1025 1.9845 1.4175 3.9375\n"
            "-0.45 -3.15 1.4175 16.2 -11.25\n"
            "-1.25 -8.75 3.9375 -11.25 125.0\n",
            # 4
            "4 4\n"
            "100\n"
            "63230.5844444444 612.9304166667 -747.9606944444 641.43625\n"
            "612.9304166667 1125.3225 385.4345833333 373.35875\n"
            "-747.9606944444 385.4345833333 548.3419444444 231.045\n"
            "641.43625 373.35875 231.045 553.9025\n",
            # 5
            "8 8\n"
            "100\n"
            "63230.5844444444 612.9304166667 -747.9606944444 641.43625 0.0 0.0 -4.4357629167 -0.8923733333\n"
            "612.9304166667 1125.3225 385.4345833333 373.35875 0.0 0.0 -2.28442 -0.285995\n"
            "-747.9606944444 385.4345833333 548.3419444444 231.045 0.0 0.0 1.2208366667 -0.3068316667\n"
            "641.43625 373.35875 231.045 553.9025 0.0 0.0 0.4227525 -0.247455\n"
            "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0\n"
            "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0\n"
            "-4.4357629167 -2.28442 1.2208366667 0.4227525 0.0 0.0 0.03910656 -0.000211735\n"
            "-0.8923733333 -0.285995 -0.3068316667 -0.247455 0.0 0.0 -0.000211735 0.00035344\n",
            # 6
            "10 10\n"
            "100\n"
            "14.3772944444 -5.0565611111 3.5121166667 -4.1422888889 -14.1083055556 -3.5417388889 1.9699444444 1.4946 5.3292111111 -4.8943055556\n"
            "-5.0565611111 17.8045433333 4.2837744444 10.4701266667 0.94065 -9.8033388889 -8.3057 -5.8145844444 -7.6705733333 1.6070477778\n"
            "3.5121166667 4.2837744444 17.3844233333 3.4123688889 -0.3063722222 -5.20625 -0.3092222222 -1.7159533333 3.0243355556 5.6025655556\n"
            "-4.1422888889 10.4701266667 3.4123688889 24.9812711111 7.5694888889 1.4143333333 -10.7027888889 12.2306377778 -8.2331511111 6.01512\n"
            "-14.1083055556 0.94065 -0.3063722222 7.5694888889 28.5343833333 4.0409055556 -1.7047333333 9.8995888889 -0.7199222222 7.4380277778\n"
            "-3.5417388889 -9.8033388889 -5.20625 1.4143333333 4.0409055556 19.8342722222 -0.5312777778 5.6621444444 3.7936444444 -1.3436055556\n"
            "1.9699444444 -8.3057 -0.3092222222 -10.7027888889 -1.7047333333 -0.5312777778 11.4832444444 -2.3311777778 8.1057666667 -1.4896777778\n"
            "1.4946 -5.8145844444 -1.7159533333 12.2306377778 9.8995888889 5.6621444444 -2.3311777778 28.3486266667 5.1920711111 7.4087088889\n"
            "5.3292111111 -7.6705733333 3.0243355556 -8.2331511111 -0.7199222222 3.7936444444 8.1057666667 5.1920711111 18.1832266667 -4.9375577778\n"
            "-4.8943055556 1.6070477778 5.6025655556 6.01512 7.4380277778 -1.3436055556 -1.4896777778 7.4087088889 -4.9375577778 12.2884677778\n"
        ]

        self.eigenvalues = [
            # 1
            [2.17452838244665e-18,
             0.14095560230146623,
             43.23707773103185],
            # 2
            [2.2540526028812313,
             47.02280613224596,
             14219.241124598206],
            # 3
            [3.854535519339076e-15,
             1.2725146664292903,
             7.878683351460009,
             17.160720111221575,
             126.87258187088914],
            # 4
            [302.3464347643159,
             389.85619779388423,
             1513.9040823374494,
             63252.04467399323],
            # 5
            [0.0,
             0.0001259684966880073,
             0.02367641739437391,
             302.3489186721309,
             389.8680825373164,
             1513.905043108782,
             63252.04500218476],
            # 6
            [2.2213152116552263e-15,
             0.18336852825664315,
             4.373572114574009,
             5.312914416385655,
             12.295501872329673,
             13.907839974342442,
             23.837283677545447,
             29.341596388989668,
             44.92667259636489,
             59.041003764545]
        ]

        self.explained_variance_ratio = [
            # 1
            [0.9967505212430788, 1.0, 1.0],
            # 2
            [0.9965464627051488, 0.9998420261303573, 1.0],
            # 3
            [0.8282338084351473, 0.9402602870411843, 0.9916929257966238, 1.0, 1.0],
            # 4
            [0.9662974485501475, 0.9894252645650435, 0.9953810728139382, 1.0]
        ]

    def test_center_data(self):
        for test in range(len(self.centered_data)):
            with self.subTest(test=test + 1):
                m = Matrix(self.matrices[test])
                centered_m = PCA.center_data(m)
                correct_m = Matrix(self.centered_data[test])
                for row in range(1, m.num_columns + 1):
                    for column in range(1, m.num_columns + 1):
                        self.assertAlmostEqual(centered_m[row, column], correct_m[row, column], 10)

    def test_covariance_matrix(self):
        for test in range(len(self.covariance_data)):
            with self.subTest(test=test + 1):
                m = Matrix(self.matrices[test])
                centered_m = PCA.center_data(m)
                cov_m = PCA.covariance_matrix(centered_m)
                correct_m = Matrix(self.covariance_data[test])
                for row in range(1, m.num_columns + 1):
                    for column in range(1, m.num_columns + 1):
                        self.assertAlmostEqual(cov_m[row, column], correct_m[row, column], 10)

    def test_eigenvalues(self):
        for test in range(len(self.eigenvalues)):
            with self.subTest(test=test + 1):
                m = Matrix(self.matrices[test])
                centered_m = PCA.center_data(m)
                cov_m = PCA.covariance_matrix(centered_m)
                eigenvalues = PCA.find_eigenvalues(cov_m)
                for i in range(len(eigenvalues)):
                    self.assertAlmostEqual(eigenvalues[i], self.eigenvalues[test][i], 6)

    def test_explained_variance_ratio(self):
        for test in range(len(self.explained_variance_ratio)):
            with self.subTest(test=test + 1):
                eigenvalues = self.eigenvalues[test]
                for k in range(len(eigenvalues)):
                    ratio = PCA.explained_variance_ratio(eigenvalues, k + 1)
                    self.assertAlmostEqual(ratio, self.explained_variance_ratio[test][k], 2)


if __name__ == '__main__':
    unittest.main()
